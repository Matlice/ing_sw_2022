@startuml

skinparam linetype ortho

package "controller" as controller {
    class "Controller" as Controller {
        - Model model
        - View view
        --
        + void mainloop() 
        'todo da fare
    }

    enum "PromptType" as PromptType {
        SELECT_OPTION_PROMPT
        ADD_HIERARCHY_PROMPT
        INSERT_FIELD_VALUE_PROMPT
        INSERT_USERNAME
        INSERT_PASSWORD
        ...
    }

    enum "InfoType" as InfoType {
        YOUR_OFFERS_INFO
        YOUR_OFFERS_BY_CATEGORY_INFO
        PLACES_INFO
        DATES_INFO
        HOURS_INFO
        ...
    }

    Controller -up- PromptType
    Controller -up- InfoType
}

package "model" as model {
    class "Model" as Model {
        'todo
    }

    package "model.data" as data {

        abstract class Hierarchy {
            - Category root
            + Category getRootCategory()
        }

        abstract class Offer {
            String getName()
            User getOwner()
            OfferStatus getStatus()
            LeafCategory getCategory()
        }

    }

    Model -- Offer
    Model -- Hierarchy

}

package "view" as view {

    class "IMessage" as IMessage {
        + void show()
    }

    interface "InfoFactory" as InfoFactory {
        --
        + IMessage getHierarchyMessage(Hierarchy)
        + IMessage getConfigurationMessage(Settings)
        ...
    }

    interface "View" as View {
        --
        + InfoFactory getInfoFactory()
        + <T> void showList(InfoType, List<T>)
        + <V> selectItem(PromptType, List<V>)
        + String getText(PromptType)
        + Boolean getBoolean(PromptType)
        ...
    }

    package "stream" as stream {

        package "stream.datatypes" as datatypes {

            class "DataTypeConverter" as DataTypeConverter {
                - Map<Class<?>, Converter> converters
                + StreamDataType getViewType(Object o)
            }

            interface StreamDataType {
                String getStreamRepresentation()
            }

            class StreamHierarchyAdapter implements StreamDataType {
                - Hierarchy hierarchy
                ' todo lasciare il metodo implementato?
            }

            class StreamOfferAdapter implements StreamDataType {
                - Offer offer
            }

        }

        interface "IStreamMessage" as IStreamMessage extends IMessage {
        }

        class "StreamView" as StreamView implements View{
            --
            ...
        }

        class StreamInfoFactory implements InfoFactory {
            - StreamView view
        }

        class ConversionMap {
            - Map<PromptType, String> promptMap
            - Map<InfoType, String> infoMap
            ...
            --
            + String convertPrompt(PromptType)
            + String convertInfo(InfoType)
            ...
        }

        abstract class AStreamMessage implements IStreamMessage {
            - StreamView view
            + void show()
        }

        StreamInfoFactory <-right- StreamView
        StreamView --> DataTypeConverter
        StreamView -right-> ConversionMap
        DataTypeConverter -right- StreamDataType

    }

    View -left- InfoFactory
    InfoFactory -left- IMessage
}

Controller -down-> Model
Controller -right-> View

@enduml