@startuml

skinparam linetype ortho

package "controller" as controller {
    class "Controller" as Controller {
        -  model: Model
        -  view: View
        --
        + mainloop(): void
        'todo da fare
    }

    enum "PromptType" as PromptType {
        SELECT_OPTION_PROMPT
        ADD_HIERARCHY_PROMPT
        INSERT_FIELD_VALUE_PROMPT
        INSERT_USERNAME
        INSERT_PASSWORD
        ...
    }

    enum "InfoType" as InfoType {
        YOUR_OFFERS_INFO
        YOUR_OFFERS_BY_CATEGORY_INFO
        PLACES_INFO
        DATES_INFO
        HOURS_INFO
        ...
    }

    Controller -up- PromptType
    Controller -up- InfoType
}

package "model" as model {
    class "Model" as Model {
        'todo
    }

    package "model.data" as data {

        abstract class Hierarchy {
            - root: Category
            + getRootCategory(): Category
        }

        abstract class Offer {
            + getName(): String
            + getOwner(): User
            + getStatus(): OfferStatus
            + getCategory(): LeafCategory
        }

    }

    Model -- Offer
    Model -- Hierarchy

}

package "view" as view {

    class "IMessage" as IMessage {
        + show(): void
    }

    interface "InfoFactory" as InfoFactory {
        --
        + getHierarchyMessage(Hierarchy): IMessage
        + getConfigurationMessage(Settings): IMessage
        ...
    }

    interface "View" as View {
        --
        + getInfoFactory(): InfoFactory
        + showList(InfoType, List<T>): void
        + selectItem(PromptType, List<V>): V
        + getText(PromptType): String
        + getBoolean(PromptType): Boolean
        ...
    }

    package "stream" as stream {

        package "stream.datatypes" as datatypes {

            class "DataTypeConverter" as DataTypeConverter {
                - converters: Map<Class<?>, Converter>
                + getViewType(Object o): StreamDataType 
            }

            interface StreamDataType {
                + getStreamRepresentation(): String
            }

            class StreamHierarchyAdapter implements StreamDataType {
                - hierarchy: Hierarchy
                ' todo lasciare il metodo implementato?
            }

            class StreamOfferAdapter implements StreamDataType {
                - offer: Offer
            }

        }

        interface "IStreamMessage" as IStreamMessage extends IMessage {
        }

        class "StreamView" as StreamView implements View{
            --
            ...
        }

        class StreamInfoFactory implements InfoFactory {
            - view: StreamView
        }

        class ConversionMap {
            - promptMap: Map<PromptType, String>
            - infoMap: Map<InfoType, String>
            ...
            --
            + convertPrompt(PromptType): String
            + convertInfo(InfoType): String
            ...
        }

        abstract class AStreamMessage implements IStreamMessage {
            - view: StreamView
            + show(): void
        }

        StreamInfoFactory <-right- StreamView
        StreamView --> DataTypeConverter
        StreamView -right-> ConversionMap
        DataTypeConverter -right- StreamDataType

    }

    View -left- InfoFactory
    InfoFactory -left- IMessage
}

Controller -down-> Model
Controller -right-> View

@enduml