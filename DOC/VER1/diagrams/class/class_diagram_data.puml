@startuml

skinparam ClassAttributeIconSize 0
'skinparam groupInheritance 2
skinparam linetype ortho
hide empty members

package data #FFFFFF {

    interface CategoryFactory {
        + getCategory(id: int): Category
        + createCategory(name: String, father: Category, isLeaf: bool): Category
    }

    interface HierarchyFactory {
        + getHierarchies(): Hierarchy[]
        + createHierarchy(root: Category): Hierarchy
    }

    interface UserFactory {
        + getUser(username: String): User
        + createUser(username: String, userType: UserTypes): User
    }

    enum UserTypes {
        CONFIGURATOR
    }

    abstract class Category <<extends HashMap<String, TypeDefinition>>> {
        + getFather(): Category
        + setFather(father: Category): void
        + isRoot(): bool
    }

    class TypeDefinition<T   > {
        + FRIENDLY_NAME: String
        + TYPE: T
        + REQUIRED: bool
        + {static} fromString<Q>(): TypeDefinition<Q>
    }
    abstract class Hierarchy {}

    abstract class User {
        + {abstract} getUsername(): String
    }

    class ConfiguratorUser extends User {}

    abstract class NodeCategory extends Category {
        + addChild(child: Category): Category
        + removeChild(child: Category): Category
        + getChildren(): Category[]
    }
    
    abstract class LeafCategory extends Category {}

}

User ..|> Authenticable

Category --> "0..1" Category: father
Hierarchy --> "1" Category: root
NodeCategory "2..n" o--> Category

Category ..> TypeDefinition

HierarchyFactory -[hidden]-> CategoryFactory
CategoryFactory -[hidden]-> UserFactory

CategoryFactory .down.> Category: creates >
HierarchyFactory .down.> Hierarchy: creates >
UserFactory .down.> User: creates >
UserFactory ..> UserTypes

@enduml